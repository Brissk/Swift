/* 
Задания:
1. Создать протокол для меню. Протокол должен содержать стоимость и наименование. Стоимость и название должны быть get-only.
2. Создайте класс кафе, в нём должен быть массив с наименованиями меню и инициализатор. Подпишите структуру чая с прошлого занятия на протокол из первого пункта. В качестве name должен быть вид чая и “tea”. Например, для чёрного чая должно быть black tea, а для зелёного green tea.
3. Создайте ещё 3 кафе, для которых класс Cafe будет родительским.
4. Добавить в родительский класс функцию (add) по добавлению новой позиции в меню. Саму переменную меню сделать приватной, если она ещё таковой не является.
5. Сделать так, чтобы в первом из трёх классов наследников (например, FirstCafe) функция add помимо того, что выполняла всё тоже самое, что и в родительском классе, печатала в консоль стоимость добавляемой позиции.
6. Создать класс автомата с едой, не реализовывать в нём ни методов, ни свойств, однако, этот класс должен уметь делать всё тоже самое, что и FirstCafe.
7. Сделать так, чтобы от класса автомата с напитками нельзя было наследоваться.
*/

protocol Menu {
    var cost:Int {get}
    var name:String {get}    
}

class Cafe {
    private var menu:[Menu] = []

    init (cafe:[Cafe]) {
        self.cafe = cafe
    }

    func add(newPosition:Menu){
        self.menu.append(newPosition)
    }
}

class CafeOne: Cafe {
    override func add(newPosition:Menu){
        self.menu.append(newPosition)
        print(newPosition.name,newPosition.cost)
    }
} 
class CafeTwo: Cafe {} 
class CafeThree: Cafe {} 

final class VendingMachine: CafeOne {
    
}